---
description: 
globs: 
alwaysApply: true
---
# TeloDox - Cursor Rules for Claude

## Project Context
Multi-tenant SaaS for telecom document management. Nuxt 3 + TypeScript + Supabase + Headless UI + vue-sonner.

## Code Style & Standards

### TypeScript
- Use strict TypeScript with proper typing
- Define interfaces for all data structures
- Use Supabase generated types where possible
- Prefer type assertions over `any`

### Vue/Nuxt Conventions
- Use Composition API with `<script setup>`
- Prefer composables for reusable logic
- Use auto-imports for components and composables
- Follow Nuxt 3 directory conventions

### UI Components
- Use Headless UI components with custom styling wrappers
- Maintain consistent dark theme across all components
- Use vue-sonner for toast notifications
- Implement proper accessibility with Headless UI
- All components should be mobile-responsive

### Multi-tenant Architecture
- Always include tenant context in API calls
- Use RLS policies, never client-side tenant filtering
- Extract tenant from subdomain in middleware
- Prefix all tenant-scoped routes with tenant validation

### Database Operations
- Use Supabase client with RLS enabled
- Never bypass RLS in client-side code
- Include audit logging for sensitive operations
- Use transactions for multi-table operations

### Form Handling
- Auto-save on field changes with debouncing (1 second)
- Validate forms both client and server side
- Use reactive form state management
- Implement optimistic updates for better UX

### File Management
- Upload files directly to R2 with signed URLs
- Validate file types and sizes on upload
- Organize files by tenant/application structure
- Implement automatic cleanup policies

### Authentication & Authorization
- Use role-based system: platform_owner, organization_user (owner/admin/member), carrier
- Check user permissions on every protected route
- Use Supabase Auth with role-based access
- Implement proper session management
- Add rate limiting for sensitive endpoints

### Error Handling
- Use try/catch blocks for all async operations
- Provide meaningful error messages to users
- Log errors with context for debugging
- Implement graceful fallbacks

### Performance
- Use lazy loading for large components
- Implement proper caching strategies
- Optimize database queries with indexes
- Use CDN for static assets
- Client-side rendering for browser-dependent features

### Security
- Sanitize all user inputs
- Use parameterized queries
- Implement CSRF protection
- Validate file uploads thoroughly

## Component Structure

### Headless UI Wrappers
```vue
<script setup lang="ts">
// Use HeadlessSelect, HeadlessCombobox, HeadlessModal, HeadlessDropdown
// Maintain consistent dark theme styling
// Implement proper v-model support
// Add loading and disabled states
</script>

<template>
  <!-- Accessible components with consistent styling -->
  <!-- Mobile responsive design -->
</template>
```

### Form Components
```vue
<script setup lang="ts">
// Props with proper typing
// Composables for form logic
// Auto-save implementation (1 second debounce)
// Validation rules
</script>

<template>
  <!-- Proper accessibility -->
  <!-- Mobile responsive -->
</template>
```

### API Routes
```typescript
// Tenant validation first
// Authentication check
// Input validation
// Database operation with RLS
// Proper error handling
// Audit logging
```

## Naming Conventions
- Components: PascalCase (`FormBuilder.vue`)
- Composables: camelCase with `use` prefix (`useFormBuilder.ts`)
- API routes: kebab-case (`form-templates.post.ts`)
- Database tables: snake_case (`form_templates`)
- Environment variables: SCREAMING_SNAKE_CASE

## Import Structure
```typescript
// 1. Vue/Nuxt imports
// 2. Third-party libraries (Headless UI, vue-sonner)
// 3. Local components
// 4. Composables
// 5. Types
// 6. Utils
```

## Testing Considerations
- Test multi-tenant isolation
- Validate RLS policies work correctly
- Test form auto-save functionality (1 second debounce)
- Verify signature capture works on mobile
- Test file upload edge cases
- Test SSR/hydration compatibility
- Validate role-based access controls

## Documentation
- Document complex business logic
- Add JSDoc comments for public functions
- Keep README updated with setup instructions
- Document API endpoints clearly

## UI Component Library
- `HeadlessSelect` - Dropdown selection with search
- `HeadlessCombobox` - Searchable select with filtering
- `HeadlessModal` - Modal dialogs with size variants
- `HeadlessDropdown` - Context menus and dropdowns
- `DataTable` - Full-featured table with search/sort/pagination
- All components use consistent dark theme styling

## Toast Notifications
- Use `$toast` from vue-sonner plugin
- Dark theme with consistent styling
- Wrap in ClientOnly for SSR compatibility
- Use appropriate toast types (success, error, warning, info)

## Focus Areas for Current Phase
1. âœ… Multi-tenant architecture with subdomain routing
2. âœ… Modern UI component library with Headless UI
3. âœ… Form builder with 11 field types and auto-save
4. âœ… Digital signature capture
5. âœ… Role-based dashboard system
6. ðŸŽ¯ Document upload and OCR processing
7. ðŸŽ¯ Team management and deal assignment
8. ðŸŽ¯ MSA redlining and collaboration

## Common Patterns
- Use `navigateTo()` for programmatic navigation
- Use `$fetch` for API calls with proper error handling
- Implement loading states for all async operations
- Use ClientOnly wrapper for client-dependent features
- Store form state reactively with auto-save debouncing
- Use `$toast` for user feedback instead of alert dialogs

## Performance Optimizations
- Bundle size reduced by 29% with Headless UI migration
- Lazy load heavy components
- Use process.client checks for browser APIs
- Implement proper SSR compatibility
- Optimize GSAP animations with existence checks

Remember: MVP foundation is complete. Focus on game-changing features: document processing, team collaboration, and MSA redlining to differentiate from competitors.